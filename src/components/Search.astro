---
// Inspired by -> https://github.com/chrismwilliams/astro-theme-cactus/blob/main/src/components/Search.astro

import "@pagefind/default-ui/css/ui.css";
import SearchIcon from "@/components/icons/SearchIcon";
import SearchBar from "astro-pagefind/components/Search";
---

<site-search class="ms-auto" id="search">
  <button
    aria-label="Search - Magnifyin glass"
    class="flex items-center justify-center rounded-md gap-1"
    data-open-modal
    disabled
  >
    <SearchIcon size={24} />
    <!-- <span class='md:hidden text-2xl'> Search</span> -->
  </button>
  <dialog
    aria-label="search"
    class="h-full max-h-full w-full max-w-full border border-zinc-400 bg-white dark:bg-[#0a0910ec] shadow backdrop:backdrop-blur sm:mx-auto sm:mb-auto sm:mt-16 sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-md opacity-0"
  >
    <div class="dialog-frame flex flex-col gap-4 p-6 pt-12 sm:pt-6">
      <button
        class="ms-auto cursor-pointer rounded-full bg-black text-white px-4 py-2 dark:bg-white dark:text-black"
        data-close-modal>Close</button
      >

      <div class="search-container dark:text-white">
        <SearchBar
          className="pagefind-ui"
          id="search"
          uiOptions={{ showImages: true, showSubResults: true }}
        />
      </div>
    </div>
  </dialog>
</site-search>

<script>
  import { animate } from "motion";
  import { DIALOG_ANIMATION_DURATOIN_SECOND } from "src/constants/animation";
  class SiteSearch extends HTMLElement {
    constructor() {
      super();
      // eslint-disable-next-line
      const openBtn = this.querySelector<HTMLButtonElement>(
        "button[data-open-modal]",
      )!;
      // eslint-disable-next-line
      const closeBtn = this.querySelector<HTMLButtonElement>(
        "button[data-close-modal]",
      )!;
      // eslint-disable-next-line
      const dialog = this.querySelector("dialog")!;
      // eslint-disable-next-line
      const dialogFrame = this.querySelector(".dialog-frame")!;

      const onWindowClick = (event: MouseEvent) => {
        // make sure the click is outside the of the dialog
        if (
          document.body.contains(event.target as Node) &&
          !dialogFrame.contains(event.target as Node)
        )
          closeModal();
      };
      const handleEscKey = (e: KeyboardEvent) => {
        if (e.key === "Escape" && dialog.open) {
          closeModal();
          window.removeEventListener("keydown", handleEscKey);
        } else return;
      };
      const openModal = (event?: MouseEvent) => {
        dialog.showModal();

        /**
         * Appear expand top down animation
         */
        animate(
          "dialog",
          {
            clipPath: [
              "polygon(0 0, 100% 0, 100% -200%, -200% -200%)",
              "polygon(0 0, 100% 0, 100% 100%, 0% 100%)",
            ],
            opacity: [0, 1],
          },
          { duration: DIALOG_ANIMATION_DURATOIN_SECOND },
        );
        document.body.classList.add("overflow-hidden");
        this.querySelector("input")?.focus();
        event?.stopPropagation();
        window.addEventListener("click", onWindowClick);
        window.addEventListener("keydown", handleEscKey);
      };

      const closeModal = () => {
        /**
         * Disappear collapse down top animation
         */
        animate(
          "dialog",
          {
            clipPath: [
              "polygon(0 0, 100% 0, 100% 100%, 0% 100%)",
              "polygon(0 0, 100% 0, 100% -200%, -200% -200%)",
            ],
            opacity: [1, 0],
          },
          { duration: DIALOG_ANIMATION_DURATOIN_SECOND },
        );

        setTimeout(
          () => dialog.close(),
          (DIALOG_ANIMATION_DURATOIN_SECOND / 2) * 1000,
        );

        document.body.classList.remove("overflow-hidden");
        window.removeEventListener("click", onWindowClick);
        window.addEventListener("keydown", handleEscKey);
      };

      openBtn.addEventListener("click", openModal);
      openBtn.disabled = false;
      closeBtn.addEventListener("click", closeModal);
      document.addEventListener("astro:after-swap", closeModal);

      // Listen for `/` keyboard shortcut
      window.addEventListener("keydown", (e) => {
        if (e.key === "/" && !dialog.open) {
          openModal();
          e.preventDefault();
        }
      });
      //   if (import.meta.env.DEV) return;
      //   const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
      //   onIdle(async () => {
      //     // @ts-expect-error : there's no ts declaration available for now
      //     const { PagefindUI } = await import("@pagefind/default-ui");
      //     new PagefindUI({
      //       baseUrl: import.meta.env.BASE_URL,
      //       bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
      //       element: "#pagefind__search",
      //       showImages: false,
      //     });
      //   });
      // });
    }
  }

  customElements.define("site-search", SiteSearch);
</script>
