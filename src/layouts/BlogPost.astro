---
// import type { MarkdownHeading } from "astro";

import type { BlogEntry } from "@/types/contentful";

import FormattedDate from "@/components/FormattedDate";
import Tag from "@/components/Tag";
import BaseLayout from "@/layouts/BaseLayout";
import { Image } from "astro:assets";

type Props = {
  // headings: MarkdownHeading[];
  id: string;
  post: BlogEntry;
  readTime: string;
};

const { post, readTime /*headings, id*/ } = Astro.props;
// const { cardImage, description, heroImage, pubDate, tags, title } = data;
const { cardImage, description, heroImage, tags, title } = post.fields;
const pubDate = new Date(post.sys.createdAt);

const articleDate = pubDate.toISOString();
---

<BaseLayout
  articleDate={articleDate}
  description={description}
  image={"fields" in cardImage ? cardImage.fields.file?.url : ""}
  title={title}
>
  <article class="min-w-full md:py-4 sm:max-w-none md:max-w-none">
    <header class="mb-3 flex flex-col justify-center items-center gap-6">
      <div class="flex flex-col gap-2">
        <div class="flex items-center justify-center gap-x-1">
          <p class="text-center text-sm text-opacity-50">
            Published <FormattedDate date={pubDate} />
          </p>
          <p class="text-center text-sm text-opacity-50 font-bold">
            - {readTime}
          </p>
        </div>
        <h1 class="text-center text-4xl md:text-6xl md:pb-2.5 font-semibold">
          {title}
        </h1>
      </div>

      <div class="flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5">
        {tags.map((tag) => <Tag tag={"fields" in tag ? tag.fields.title : ""} />)}
      </div>
    </header>

    {
      heroImage && (
        <Image
          alt={`img of ${title}`}
          class="rounded-md w-full max-h-[300px]  md:max-h-[500px] my-8 object-cover"
          format="jpg"
          height={500}
          loading="eager"
          quality={100}
          src={"fields" in heroImage ? (heroImage.fields.file?.url as string) : ""}
          width={1000}
        />
      )
    }

    <hr />

    <div>
      <slot />
    </div>
  </article>
</BaseLayout>

<script>
  const fnObserver = () => {
    // const activeTracker = new Set<Element>();s
    // const handleIntersection: IntersectionObserverCallback = (
    //   entries: IntersectionObserverEntry[],
    //   // observer: IntersectionObserver
    // ) => {
    //   const normalPageIndexStateLight = ["text-stone-400", "hover:text-stone-900", "hover:font-bold"];
    //   const activePageIndexStyleLight = [
    //     "font-bold",
    //     "text-stone-900",
    //     "bg-gradient-to-r",
    //     "from-orange-400",
    //     "to-orange-200",
    //     "shadow-[3px_1px_0px_1px_rgba(251,146,60,0.6)]",
    //   ];
    //   const normalPageIndexStateDark = ["dark:text-stone-300", "dark:hover:text-stone-100", "dark:hover:font-bold"];
    //   const activePageIndexStyleDark = [
    //     "font-bold",
    //     "dark:text-stone-100",
    //     "dark:bg-gradient-to-r",
    //     "dark:from-emerald-600",
    //     "dark:to-emerald-400",
    //     "dark:shadow-[3px_1px_0px_1px_rgba(167,243,208,0.3)]",
    //   ];
    //   entries.forEach((entry) => {
    //     const index = document.querySelector(`aside a[href="#${entry.target.id}"]`);
    //     index?.classList.add(...normalPageIndexStateLight, ...normalPageIndexStateDark);
    //     if (entry.isIntersecting) {
    //       activeTracker.add(entry.target);
    //     }
    //     if (!entry.isIntersecting) {
    //       index?.classList.remove(...activePageIndexStyleLight, ...activePageIndexStyleDark);
    //       activeTracker.delete(entry.target);
    //     }
    //     const activeIndex = document.querySelector(`aside a[href="#${Array.from(activeTracker)[0]?.id}"]`);
    //     activeIndex?.classList.remove("text-stone-400", "dark:text-stone-300");
    //     activeIndex?.classList.add(...activePageIndexStyleLight, ...activePageIndexStyleDark);
    //   });
    // };
    // const headings = document.querySelectorAll(
    //   "div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
    // );
    // const options: IntersectionObserverInit = {
    //   root: null,
    //   rootMargin: "15% 0px 0% 0px ",
    //   threshold: 1,
    // };
    /**
     * Use Intersection observe api to watch change in viewport
     * https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
     */
    // const observer = new IntersectionObserver(handleIntersection, options);
    // headings.forEach((heading) => {
    //   // Set up observer for intersect api
    //   observer.observe(heading);
    //   /**
    //    * Set up smoth scroll with offset top on index clicks
    //    */
    //   const targetId = heading.getAttribute("id");
    //   if (!targetId) {
    //     return;
    //   }
    //   const index = document.querySelector(`aside a[href="#${targetId}"]`);
    //   if (index) {
    //     const OFFSET = 90; // in pixel
    //     index.addEventListener("click", function (event) {
    //       event.preventDefault();
    //       const targetElement = heading as HTMLElement;
    //       const targetPosition = targetElement.offsetTop - OFFSET;
    //       window.scrollTo({ behavior: "smooth", top: targetPosition });
    //       activeTracker.clear();
    //       activeTracker.add(heading);
    //       window.history.pushState(null, "", `#${targetId}`);
    //     });
    //   }
    // });
  };
  fnObserver();
  document.addEventListener("astro:after-swap", fnObserver);
</script>
